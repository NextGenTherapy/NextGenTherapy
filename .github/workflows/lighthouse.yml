name: Lighthouse Performance Audit

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lighthouse:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install --package-lock-only
          npm ci

      - name: Build application
        run: npm run build
        env:
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY || 'dummy_key_for_build' }}

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY || 'dummy_key_for_build' }}

      - name: Wait for app to be ready
        run: |
          timeout 60s bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Run Lighthouse CI
        run: npx lhci autorun --config=.lighthouserc.json
        env:
          LHCI_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports
          path: '.lighthouseci'

      - name: Comment PR with Lighthouse results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Read Lighthouse results
            const resultsPath = '.lighthouseci/lhci_reports';
            if (fs.existsSync(resultsPath)) {
              const files = fs.readdirSync(resultsPath);
              const reportFile = files.find(f => f.endsWith('.json'));

              if (reportFile) {
                const report = JSON.parse(fs.readFileSync(path.join(resultsPath, reportFile), 'utf8'));
                const scores = report.categories;

                const comment = `## ðŸš€ Lighthouse Performance Report

                | Category | Score |
                |----------|-------|
                | Performance | ${Math.round(scores.performance.score * 100)} |
                | Accessibility | ${Math.round(scores.accessibility.score * 100)} |
                | Best Practices | ${Math.round(scores['best-practices'].score * 100)} |
                | SEO | ${Math.round(scores.seo.score * 100)} |

                **Core Web Vitals:**
                - LCP: ${report.audits['largest-contentful-paint'].displayValue}
                - FID: ${report.audits['max-potential-fid'].displayValue}
                - CLS: ${report.audits['cumulative-layout-shift'].displayValue}
                `;

                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            }